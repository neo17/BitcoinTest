apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'


// Main build script for Example
//
// Usage: gradlew assembleDebug           Build debug APK
//        gradlew assembleRelease         Build release APK
//        gradlew test                    Run local unit test
//        gradlew connectedAndroidTest    Run instrumented unit test


final VERSION_MAJOR = 1 // max two digits
final VERSION_MINOR = 0 // max two digits
final VERSION_PATCH = 0 // max two digits
final VERSION_BUILD = 0 // max three digits


dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	testCompile 'junit:junit:4.12'
	compile 'com.android.support:appcompat-v7:24.1.1'
	compile 'com.android.support:design:24.1.1'
	compile 'io.reactivex:rxjava:1.1.6'
	compile 'io.reactivex:rxandroid:1.2.1'
	compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.4.0'
	compile 'com.squareup.retrofit2:retrofit:2.1.0'
	compile 'com.squareup.retrofit2:converter-gson:2.1.0'
	compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
	compile 'cz.kinst.jakub:stateful-layout:1.1.1'
	// Dependencies for local unit tests
	testCompile "junit:junit:4.12"
	testCompile "org.mockito:mockito-all:1.10.19"
	testCompile "org.hamcrest:hamcrest-all:1.3"
	testCompile "org.powermock:powermock-module-junit4:1.6.2"
	testCompile "org.powermock:powermock-api-mockito:1.6.2"
	// Android Testing Support Library's runner and rules
	androidTestCompile "com.android.support.test:runner:0.5"
	androidTestCompile "com.android.support.test:rules:0.5"

	// Espresso UI Testing dependencies.
	androidTestCompile "com.android.support.test.espresso:espresso-core:2.2.2"
	androidTestCompile "com.android.support.test.espresso:espresso-contrib:2.2.2"
	androidTestCompile "com.android.support.test.espresso:espresso-intents:2.2.2"

}


/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
	resolutionStrategy.force "com.android.support:support-annotations:24.1.1"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
	println "Excluding compile dependency: ${compileDependency.getName()}"
	configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
		configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
	}
}



android {
	compileSdkVersion 24
	buildToolsVersion "24.0.0"

	defaultConfig {
		applicationId "com.number26.bitcointest"
		minSdkVersion 16
		targetSdkVersion 24
		versionCode VERSION_MAJOR * 10000000 + VERSION_MINOR * 100000 + VERSION_PATCH * 1000 + VERSION_BUILD
		versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
		testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
	}

	signingConfigs{
		release{
			// passwords and alias are obtained via askForPasswords task
			storeFile file("../${project.property('keystore.file')}")
			storePassword ""
			keyAlias ""
			keyPassword ""
		}
	}


	buildTypes {
		debug {
			buildConfigField "boolean", "LOGS", "true"
			buildConfigField "boolean", "DEV_ENVIRONMENT", "true"

			versionNameSuffix "-debug"
		}

		release {
			buildConfigField "boolean", "LOGS", "false"
			buildConfigField "boolean", "DEV_ENVIRONMENT", "false"

			signingConfig signingConfigs.release
			zipAlignEnabled true
			minifyEnabled true
			shrinkResources false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}


	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	// If you need to add more flavors, consider using flavor dimensions.
	productFlavors {
		mock {
			applicationIdSuffix = ".mock"
		}
		prod {

		}
	}

	dataBinding {
		enabled = true
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	applicationVariants.all {
		variant ->
			if(variant.buildType.name.equals("release")) {
				renameArtifact(variant)
			}
	}

	// Always show the result of every unit test, even if it passes.
	testOptions.unitTests.all {
		testLogging {
			events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
		}
	}
}



def renameArtifact(variant) {
	variant.outputs.each
			{
				output ->
					def date = new Date().format('yyyyMMdd')
					def fileName = "example-${project.name}-${variant.versionName}-${variant.versionCode}-${date}-${variant.name}.apk"
					output.outputFile = new File((String) output.outputFile.parent, fileName)
			}
}


task askForPasswords << {
	def storePass
	def keyAlias
	def keyPass

	def keystorePropertiesFile = new File((String) project.property("keystore.properties"))

	if(project.hasProperty("keystore.properties") && keystorePropertiesFile.exists()) {
		println "Loading keystore passwords from property file..."
		Properties properties = new Properties()
		properties.load(new FileInputStream(keystorePropertiesFile))
		storePass = properties['keystore.store.password']
		keyAlias = properties['keystore.key.alias']
		keyPass = properties['keystore.key.password']
	} else {
		println "Getting keystore passwords from user input..."
		storePass = new String(System.console().readPassword("\nStore password: "))
		keyAlias = new String(System.console().readLine("Key alias: "))
		keyPass = new String(System.console().readPassword("Key password: "))
	}

	android.signingConfigs.release.storePassword = storePass
	android.signingConfigs.release.keyAlias = keyAlias
	android.signingConfigs.release.keyPassword = keyPass
}


tasks.whenTaskAdded
		{
			theTask ->
				if(theTask.name.equals("packageRelease")) {
					theTask.dependsOn "askForPasswords"
				}
		}

